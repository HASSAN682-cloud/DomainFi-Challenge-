// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "./IDomainToken.sol"; // Interface for domain-backed ERC721 or ERC1155
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract DomainLending is Ownable {
    struct Loan {
        address borrower;
        uint256 domainId;
        uint256 loanAmount;
        uint256 interestRate; // in basis points
        uint256 dueDate;
        bool repaid;
    }

    IERC20 public stablecoin;
    IDomainToken public domainToken;
    uint256 public loanCounter;
    mapping(uint256 => Loan) public loans;

    event LoanIssued(uint256 indexed loanId, address borrower, uint256 domainId, uint256 amount);
    event LoanRepaid(uint256 indexed loanId, address borrower);
    event DomainLiquidated(uint256 indexed loanId, uint256 domainId);

    constructor(address _stablecoin, address _domainToken) {
        stablecoin = IERC20(_stablecoin);
        domainToken = IDomainToken(_domainToken);
    }

    function requestLoan(uint256 domainId, uint256 amount, uint256 interestRate, uint256 duration) external {
        require(domainToken.ownerOf(domainId
